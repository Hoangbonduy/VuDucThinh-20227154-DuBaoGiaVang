import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
import time

from models import (
    linear_model,
    svr_model,
    random_forest_model,
    gradient_boosting_model,
    xgboost_model,
    lstm_model,
    sarimax_model,
    prophet_model,
)

st.set_page_config(page_title="D·ª± b√°o gi√° v√†ng ng√†y ti·∫øp theo v·ªõi 8 m√¥ h√¨nh", layout="wide")
st.title("üìà D·ª± b√°o gi√° v√†ng ng√†y ti·∫øp theo v·ªõi 8 m√¥ h√¨nh")

st.markdown("""
Ch·ªçn file CSV d·ªØ li·ªáu v√†ng l·ªãch s·ª≠ ƒë·ªÉ d·ª± b√°o gi√° v√†ng ng√†y ti·∫øp theo.

**L∆∞u √Ω:** File c√≥ th·ªÉ l·ªõn, vui l√≤ng ch·ªù trong qu√° tr√¨nh x·ª≠ l√Ω.
""")

uploaded_file = st.file_uploader("üîÑ T·∫£i l√™n file CSV d·ªØ li·ªáu v√†ng", type=["csv"])

if uploaded_file is not None:
    with st.spinner("ƒêang ƒë·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu... Vui l√≤ng ch·ªù"):
        df = pd.read_csv(uploaded_file)
        time.sleep(0.5)
    st.success(f"D·ªØ li·ªáu c√≥ {df.shape[0]} d√≤ng v√† {df.shape[1]} c·ªôt")

    model_names = [
        "Linear Regression",
        "SVR",
        "Random Forest",
        "Gradient Boosting",
        "XGBoost",
        "LSTM",
        "SARIMAX",
        "Prophet",
    ]
    model_choice = st.selectbox("‚öôÔ∏è Ch·ªçn m√¥ h√¨nh d·ª± b√°o", model_names)

    if st.button("üöÄ B·∫Øt ƒë·∫ßu d·ª± b√°o"):
        with st.spinner("ƒêang hu·∫•n luy·ªán v√† d·ª± b√°o..."):
            start_time = time.time()

            model_map = {
                "Linear Regression": linear_model.train_and_predict,
                "SVR": svr_model.train_and_predict,
                "Random Forest": random_forest_model.train_and_predict,
                "Gradient Boosting": gradient_boosting_model.train_and_predict,
                "XGBoost": xgboost_model.train_and_predict,
                "LSTM": lstm_model.train_and_predict,
                "SARIMAX": sarimax_model.train_and_predict,
                "Prophet": prophet_model.train_and_predict,
            }

            train_predict_func = model_map[model_choice]
            # Output: mae, mae_pct, rmse, rmse_pct, r2, r2_pct, mape, dates, y_test, y_pred
            mae, mae_pct, rmse, rmse_pct, r2, r2_pct, mape, dates, y_test, y_pred = train_predict_func(df)
            elapsed = time.time() - start_time

        st.success(f"D·ª± b√°o ho√†n th√†nh trong {elapsed:.2f} gi√¢y!")

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("MAE (%)", f"{mae_pct:.2f}%")
        col2.metric("RMSE (%)", f"{rmse_pct:.2f}%")
        col3.metric("MAPE (%)", f"{mape:.2f}%")
        col4.metric("R¬≤ (%)", f"{r2_pct:.2f}%")

        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(dates, y_test, label="Gi√° th·ª±c t·∫ø", color="blue")
        ax.plot(dates, y_pred, label="Gi√° d·ª± b√°o", color="orange")
        ax.set_xlabel("Ng√†y")
        ax.set_ylabel("Gi√° v√†ng")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)

        # Hi·ªÉn th·ªã duy nh·∫•t k·∫øt qu·∫£ d·ª± b√°o ng√†y ti·∫øp theo (ng√†y cu·ªëi)
        next_day = pd.to_datetime(dates[-1])
        real_next = y_test[-1]
        pred_next = y_pred[-1]
        st.subheader("üéØ D·ª± b√°o gi√° v√†ng ng√†y ti·∫øp theo:")
        st.markdown(f"""
- **Ng√†y:** {next_day.date()}
- **Gi√° th·ª±c t·∫ø:** {real_next:,.2f}
- **Gi√° d·ª± b√°o:** :orange[{pred_next:,.2f}]
        """)

else:
    st.info("üìÑ Vui l√≤ng t·∫£i l√™n file CSV d·ªØ li·ªáu v√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu d·ª± b√°o.")

st.markdown("---")
st.markdown("üí° **L∆∞u √Ω:** D·ªØ li·ªáu ƒë·∫ßu v√†o c·∫ßn ƒë·ªß l·ªõn (√≠t nh·∫•t 60 ng√†y) ƒë·ªÉ m√¥ h√¨nh d·ª± b√°o hi·ªáu qu·∫£.")
